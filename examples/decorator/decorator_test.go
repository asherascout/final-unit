// Code generated by finalunit dev, visit us at https://finalunit.com
package decorator

import (
	"testing"

	"github.com/stretchr/testify/suite"
)

type DecoratorSuite struct {
	suite.Suite
}

func (s *DecoratorSuite) TestDefaultManager0() {
	yHccP := DefaultManager()

	xKLhL := *yHccP
	lxGJv := *xKLhL.Config
	s.EqualValues(uint32(0x1), lxGJv.time)
	xKLhL = *yHccP
	lxGJv = *xKLhL.Config
	s.EqualValues(uint32(0x10000), lxGJv.memory)
	xKLhL = *yHccP
	lxGJv = *xKLhL.Config
	s.EqualValues(uint8(0x4), lxGJv.threads)
	xKLhL = *yHccP
	lxGJv = *xKLhL.Config
	s.EqualValues(uint32(0x20), lxGJv.keyLen)

	_ = yHccP
}

func (s *DecoratorSuite) TestDefaultManager1() {
	xMWsh := DefaultManager()

	ybKBW := *xMWsh
	mhCwt := *ybKBW.Config
	s.EqualValues(uint32(0x1), mhCwt.time)
	ybKBW = *xMWsh
	mhCwt = *ybKBW.Config
	s.EqualValues(uint32(0x10000), mhCwt.memory)
	ybKBW = *xMWsh
	mhCwt = *ybKBW.Config
	s.EqualValues(uint8(0x4), mhCwt.threads)
	ybKBW = *xMWsh
	mhCwt = *ybKBW.Config
	s.EqualValues(uint32(0x20), mhCwt.keyLen)

	_ = xMWsh
}

func (s *DecoratorSuite) TestDefaultManager2() {
	uunsl := DefaultManager()

	kubIQ := *uunsl
	okxVL := *kubIQ.Config
	s.EqualValues(uint32(0x1), okxVL.time)
	kubIQ = *uunsl
	okxVL = *kubIQ.Config
	s.EqualValues(uint32(0x10000), okxVL.memory)
	kubIQ = *uunsl
	okxVL = *kubIQ.Config
	s.EqualValues(uint8(0x4), okxVL.threads)
	kubIQ = *uunsl
	okxVL = *kubIQ.Config
	s.EqualValues(uint32(0x20), okxVL.keyLen)

	_ = uunsl
}

func (s *DecoratorSuite) TestDefaultManager3() {
	zCyus := DefaultManager()

	fZUlN := *zCyus
	gWtCF := *fZUlN.Config
	s.EqualValues(uint32(0x1), gWtCF.time)
	fZUlN = *zCyus
	gWtCF = *fZUlN.Config
	s.EqualValues(uint32(0x10000), gWtCF.memory)
	fZUlN = *zCyus
	gWtCF = *fZUlN.Config
	s.EqualValues(uint8(0x4), gWtCF.threads)
	fZUlN = *zCyus
	gWtCF = *fZUlN.Config
	s.EqualValues(uint32(0x20), gWtCF.keyLen)

	_ = zCyus
}

func (s *DecoratorSuite) TestDefaultManager4() {
	mHDKw := DefaultManager()

	kXVzs := *mHDKw
	zUKWv := *kXVzs.Config
	s.EqualValues(uint32(0x1), zUKWv.time)
	kXVzs = *mHDKw
	zUKWv = *kXVzs.Config
	s.EqualValues(uint32(0x10000), zUKWv.memory)
	kXVzs = *mHDKw
	zUKWv = *kXVzs.Config
	s.EqualValues(uint8(0x4), zUKWv.threads)
	kXVzs = *mHDKw
	zUKWv = *kXVzs.Config
	s.EqualValues(uint32(0x20), zUKWv.keyLen)

	_ = mHDKw
}

func (s *DecoratorSuite) TestDefaultManager5() {
	eIuOj := DefaultManager()

	iIzJr := *eIuOj
	ksgpW := *iIzJr.Config
	s.EqualValues(uint32(0x1), ksgpW.time)
	iIzJr = *eIuOj
	ksgpW = *iIzJr.Config
	s.EqualValues(uint32(0x10000), ksgpW.memory)
	iIzJr = *eIuOj
	ksgpW = *iIzJr.Config
	s.EqualValues(uint8(0x4), ksgpW.threads)
	iIzJr = *eIuOj
	ksgpW = *iIzJr.Config
	s.EqualValues(uint32(0x20), ksgpW.keyLen)

	_ = eIuOj
}

func (s *DecoratorSuite) TestDefaultManager6() {
	jvwMZ := DefaultManager()

	yaqnx := *jvwMZ
	kozgZ := *yaqnx.Config
	s.EqualValues(uint32(0x1), kozgZ.time)
	yaqnx = *jvwMZ
	kozgZ = *yaqnx.Config
	s.EqualValues(uint32(0x10000), kozgZ.memory)
	yaqnx = *jvwMZ
	kozgZ = *yaqnx.Config
	s.EqualValues(uint8(0x4), kozgZ.threads)
	yaqnx = *jvwMZ
	kozgZ = *yaqnx.Config
	s.EqualValues(uint32(0x20), kozgZ.keyLen)

	_ = jvwMZ
}

func (s *DecoratorSuite) TestDefaultManager7() {
	osCAv := DefaultManager()

	dlXmF := *osCAv
	sOpXT := *dlXmF.Config
	s.EqualValues(uint32(0x1), sOpXT.time)
	dlXmF = *osCAv
	sOpXT = *dlXmF.Config
	s.EqualValues(uint32(0x10000), sOpXT.memory)
	dlXmF = *osCAv
	sOpXT = *dlXmF.Config
	s.EqualValues(uint8(0x4), sOpXT.threads)
	dlXmF = *osCAv
	sOpXT = *dlXmF.Config
	s.EqualValues(uint32(0x20), sOpXT.keyLen)

	_ = osCAv
}

func (s *DecoratorSuite) TestDefaultManager8() {
	yfXeV := DefaultManager()

	jzieo := *yfXeV
	aRxbu := *jzieo.Config
	s.EqualValues(uint32(0x1), aRxbu.time)
	jzieo = *yfXeV
	aRxbu = *jzieo.Config
	s.EqualValues(uint32(0x10000), aRxbu.memory)
	jzieo = *yfXeV
	aRxbu = *jzieo.Config
	s.EqualValues(uint8(0x4), aRxbu.threads)
	jzieo = *yfXeV
	aRxbu = *jzieo.Config
	s.EqualValues(uint32(0x20), aRxbu.keyLen)

	_ = yfXeV
}

func (s *DecoratorSuite) TestDefaultManager9() {
	lMNHk := DefaultManager()

	eDWpF := *lMNHk
	ioJWM := *eDWpF.Config
	s.EqualValues(uint32(0x1), ioJWM.time)
	eDWpF = *lMNHk
	ioJWM = *eDWpF.Config
	s.EqualValues(uint32(0x10000), ioJWM.memory)
	eDWpF = *lMNHk
	ioJWM = *eDWpF.Config
	s.EqualValues(uint8(0x4), ioJWM.threads)
	eDWpF = *lMNHk
	ioJWM = *eDWpF.Config
	s.EqualValues(uint32(0x20), ioJWM.keyLen)

	_ = lMNHk
}

func (s *DecoratorSuite) TestPWManagerComparePassword0() {
	configVLKXy := PasswordConfig{time: uint32(18), memory: uint32(84), threads: uint8(67), keyLen: uint32(3)}
	gaJBCbBcxs := PWManager{Config: &configVLKXy}
	gaJBC := &gaJBCbBcxs
	pqpGA := defaultPasswd()
	uvQti := defaultHash()

	tiCPl, vGWri := gaJBC.ComparePassword(pqpGA, uvQti)

	s.False(tiCPl)
	s.NoError(vGWri)

	_ = tiCPl
	_ = vGWri
}

func (s *DecoratorSuite) TestPWManagerComparePassword1() {
	configYyAoR := PasswordConfig{time: uint32(19), memory: uint32(87), threads: uint8(67), keyLen: uint32(20)}
	bbXCFVBSKS := PWManager{Config: &configYyAoR}
	bbXCF := &bbXCFVBSKS
	eejmt := "Watchersharp"
	dKCjb := defaultHash()

	bhgwt, nsrLj := bbXCF.ComparePassword(eejmt, dKCjb)

	s.False(bhgwt)
	s.NoError(nsrLj)

	_ = bhgwt
	_ = nsrLj
}

func (s *DecoratorSuite) TestPWManagerComparePassword2() {
	configaGjvg := PasswordConfig{time: uint32(83), memory: uint32(97), threads: uint8(62), keyLen: uint32(82)}
	zEVMDtVaSL := PWManager{Config: &configaGjvg}
	zEVMD := &zEVMDtVaSL
	tauvE := defaultPasswd()
	gylDC := defaultHash()

	vxqiK, zyXMk := zEVMD.ComparePassword(tauvE, gylDC)

	s.False(vxqiK)
	s.NoError(zyXMk)

	_ = vxqiK
	_ = zyXMk
}

func (s *DecoratorSuite) TestPWManagerComparePassword3() {
	configzHfcL := PasswordConfig{time: uint32(87), memory: uint32(44), threads: uint8(54), keyLen: uint32(72)}
	cLjBAUDZLq := PWManager{Config: &configzHfcL}
	cLjBA := &cLjBAUDZLq
	mVtjA := defaultPasswd()
	wEqTM := defaultHash()

	ewaMb, mxaRv := cLjBA.ComparePassword(mVtjA, wEqTM)

	s.False(ewaMb)
	s.NoError(mxaRv)

	_ = ewaMb
	_ = mxaRv
}

func (s *DecoratorSuite) TestPWManagerComparePassword4() {
	configzMaDe := PasswordConfig{time: uint32(17), memory: uint32(18), threads: uint8(18), keyLen: uint32(49)}
	nPTqLvBncX := PWManager{Config: &configzMaDe}
	nPTqL := &nPTqLvBncX
	zVytu := defaultPasswd()
	tVTGg := defaultHash()

	paDrv, rCwlX := nPTqL.ComparePassword(zVytu, tVTGg)

	s.False(paDrv)
	s.NoError(rCwlX)

	_ = paDrv
	_ = rCwlX
}

func (s *DecoratorSuite) TestPWManagerComparePassword5() {
	configcBtnl := PasswordConfig{time: uint32(36), memory: uint32(99), threads: uint8(54), keyLen: uint32(41)}
	bXoxhlVhBa := PWManager{Config: &configcBtnl}
	bXoxh := &bXoxhlVhBa
	jbeMP := defaultPasswd()
	xOUTU := wrongHash()

	uMMNb, vNnCN := bXoxh.ComparePassword(jbeMP, xOUTU)

	s.False(uMMNb)
	s.Error(vNnCN)

	_ = uMMNb
	_ = vNnCN
}

func (s *DecoratorSuite) TestPWManagerComparePassword6() {
	configdHnnz := PasswordConfig{time: uint32(30), memory: uint32(62), threads: uint8(17), keyLen: uint32(4)}
	viCQwcdLkQ := PWManager{Config: &configdHnnz}
	viCQw := &viCQwcdLkQ
	zadUt := defaultPasswd()
	btdOY := defaultHash()

	pMBBp, wuIHJ := viCQw.ComparePassword(zadUt, btdOY)

	s.False(pMBBp)
	s.NoError(wuIHJ)

	_ = pMBBp
	_ = wuIHJ
}

func (s *DecoratorSuite) TestPWManagerComparePassword7() {
	configBWwqm := PasswordConfig{time: uint32(72), memory: uint32(72), threads: uint8(55), keyLen: uint32(93)}
	cURjvbIyIU := PWManager{Config: &configBWwqm}
	cURjv := &cURjvbIyIU
	ziOrD := defaultPasswd()
	idhUX := "Donkeysequoia"

	s.Panics(func() {
		cURjv.ComparePassword(ziOrD, idhUX)
	})
}

func (s *DecoratorSuite) TestPWManagerComparePassword8() {
	configWoZRG := PasswordConfig{time: uint32(12), memory: uint32(78), threads: uint8(49), keyLen: uint32(87)}
	lpCBrQdqxI := PWManager{Config: &configWoZRG}
	lpCBr := &lpCBrQdqxI
	mzKwQ := defaultPasswd()
	mRAXr := defaultHash()

	fNRLl, gJxFI := lpCBr.ComparePassword(mzKwQ, mRAXr)

	s.False(fNRLl)
	s.NoError(gJxFI)

	_ = fNRLl
	_ = gJxFI
}

func (s *DecoratorSuite) TestPWManagerComparePassword9() {
	configLFGfy := PasswordConfig{time: uint32(53), memory: uint32(94), threads: uint8(37), keyLen: uint32(75)}
	pWRPxwHpWk := PWManager{Config: &configLFGfy}
	pWRPx := &pWRPxwHpWk
	gKXAl := defaultPasswd()
	sqsga := wrongHash()

	rvZlG, hwITS := pWRPx.ComparePassword(gKXAl, sqsga)

	s.False(rvZlG)
	s.Error(hwITS)

	_ = rvZlG
	_ = hwITS
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword0() {
	configvWnmT := PasswordConfig{time: uint32(0), memory: uint32(78), threads: uint8(19), keyLen: uint32(64)}
	xlktEbzuMx := PWManager{Config: &configvWnmT}
	xlktE := &xlktEbzuMx
	ytEXg := "Speakerseed"

	s.Panics(func() {
		xlktE.GeneratePassword(ytEXg)
	})
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword1() {
	configovFXn := PasswordConfig{time: uint32(23), memory: uint32(62), threads: uint8(71), keyLen: uint32(61)}
	vWkjKFnkwC := PWManager{Config: &configovFXn}
	vWkjK := &vWkjKFnkwC
	sirou := "Knightmuck"

	// FIXME: non deterministic results detected, please add assert statements manually
	vWkjK.GeneratePassword(sirou)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword2() {
	configZoYBU := PasswordConfig{time: uint32(54), memory: uint32(76), threads: uint8(29), keyLen: uint32(18)}
	gnsACjTVUL := PWManager{Config: &configZoYBU}
	gnsAC := &gnsACjTVUL
	yuVIt := "Antelopediamond"

	// FIXME: non deterministic results detected, please add assert statements manually
	gnsAC.GeneratePassword(yuVIt)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword3() {
	configZVhPE := PasswordConfig{time: uint32(11), memory: uint32(54), threads: uint8(87), keyLen: uint32(32)}
	vCkCrqkdkv := PWManager{Config: &configZVhPE}
	vCkCr := &vCkCrqkdkv
	lnxvh := "Centaurbog"

	// FIXME: non deterministic results detected, please add assert statements manually
	vCkCr.GeneratePassword(lnxvh)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword4() {
	configrKBgm := PasswordConfig{time: uint32(62), memory: uint32(18), threads: uint8(24), keyLen: uint32(75)}
	xbJvmffJVZ := PWManager{Config: &configrKBgm}
	xbJvm := &xbJvmffJVZ
	fTSSW := "Condorvenom"

	// FIXME: non deterministic results detected, please add assert statements manually
	xbJvm.GeneratePassword(fTSSW)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword5() {
	configwcFcQ := PasswordConfig{time: uint32(12), memory: uint32(92), threads: uint8(17), keyLen: uint32(28)}
	wCEpgOOAUp := PWManager{Config: &configwcFcQ}
	wCEpg := &wCEpgOOAUp
	vaywk := "Antlermuck"

	// FIXME: non deterministic results detected, please add assert statements manually
	wCEpg.GeneratePassword(vaywk)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword6() {
	configPlQbN := PasswordConfig{time: uint32(55), memory: uint32(77), threads: uint8(7), keyLen: uint32(27)}
	ugZNsIItkp := PWManager{Config: &configPlQbN}
	ugZNs := &ugZNsIItkp
	dVoYB := "Dragonfantasy"

	// FIXME: non deterministic results detected, please add assert statements manually
	ugZNs.GeneratePassword(dVoYB)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword7() {
	configDZpyG := PasswordConfig{time: uint32(65), memory: uint32(57), threads: uint8(89), keyLen: uint32(15)}
	okEkwbCHJb := PWManager{Config: &configDZpyG}
	okEkw := &okEkwbCHJb
	xlywb := "Monkeyhill"

	// FIXME: non deterministic results detected, please add assert statements manually
	okEkw.GeneratePassword(xlywb)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword8() {
	configVpLSA := PasswordConfig{time: uint32(20), memory: uint32(69), threads: uint8(29), keyLen: uint32(57)}
	qYqpaLOkfI := PWManager{Config: &configVpLSA}
	qYqpa := &qYqpaLOkfI
	zcOEg := "Fangmountain"

	// FIXME: non deterministic results detected, please add assert statements manually
	qYqpa.GeneratePassword(zcOEg)
}

func (s *DecoratorSuite) TestPWManagerGeneratePassword9() {
	configBQnut := PasswordConfig{time: uint32(49), memory: uint32(98), threads: uint8(59), keyLen: uint32(2)}
	kYYrOcDrss := PWManager{Config: &configBQnut}
	kYYrO := &kYYrOcDrss
	xXISb := "Maretundra"

	// FIXME: non deterministic results detected, please add assert statements manually
	kYYrO.GeneratePassword(xXISb)
}

func TestDecoratorSuite(t *testing.T) {
	suite.Run(t, new(DecoratorSuite))
}
